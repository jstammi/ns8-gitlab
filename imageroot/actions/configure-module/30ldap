#!/usr/bin/env python3

import sys
import os
import agent
from agent.ldapproxy import Ldapproxy

cdomain = agent.get_env("LDAP_DOMAIN")
host = agent.get_env("HOST")

def dict_to_gitlab_rb(config, indent=0):
    lines = []
    indent_space = '  ' * indent

    for key, value in config.items():
        if isinstance(value, dict):
            if indent == 0:
                lines.append(f"{indent_space}{key} = {{")
            else:
                lines.append(f"{indent_space}'{key}' => {{")
            lines.extend(dict_to_gitlab_rb(value, indent + 1))
            lines.append(f"{indent_space}}}")
        elif isinstance(value, bool):
            lines.append(f"{indent_space}{key} = {str(value).lower()}")
        elif isinstance(value, str):
            lines.append(f"{indent_space}{key} = '{value}'")
        else:
            lines.append(f"{indent_space}{key} = {value}")

    return lines

gitlab_config = {
    'external_url': agent.get_env("HOST"),
    # NGINX-Proxy setting
}

cdomain = agent.get_env("LDAP_DOMAIN")
host = agent.get_env("HOST")

if not cdomain:
    sys.exit(0)

lp = Ldapproxy()
domain = lp.get_domain(cdomain)

if domain:
    agent.bind_user_domains([cdomain])

    if domain["schema"] == "ad":
        uid = "sAMAccountName"
        ad = "true"
    else:
        uid = "uid"
        ad = "false"

    gitlab_config['gitlab_rails'] = {
        'time_zone': 'Europe/Berlin',
        'ldap_enabled': 'true',
        'ldap_servers': {
            'ad': ad,
            'uid': uid
        }
    }

file_path = 'gitlab.rb'
payload = dict_to_gitlab_rb(gitlab_config)

tmpfile = ".{0}-{1!s}.tmp".format(os.path.basename(file_path), os.getpid())

bdir = os.path.dirname(file_path) # Base directory
if bdir:
    tmpfile = bdir + '/' + tmpfile # Prepend the base directory
else:
    pass # File is in the current working directory

with open(tmpfile, 'w') as ofile:
    ofile.write(payload)
os.rename(tmpfile, file_path)